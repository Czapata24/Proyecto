// <auto-generated />
using System;
using HankoSpa.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HankoSpa.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250520225451_NombreDeTuMigracion")]
    partial class NombreDeTuMigracion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HankoSpa.Models.Cita", b =>
                {
                    b.Property<int>("CitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CitaId"));

                    b.Property<string>("EstadoCita")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCita")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("HoraCita")
                        .HasColumnType("time");

                    b.Property<int>("ServicioId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsuarioID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CitaId");

                    b.HasIndex("ServicioId");

                    b.HasIndex("UserId");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("HankoSpa.Models.CustomRol", b =>
                {
                    b.Property<int>("CustomRolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomRolId"));

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomRolId");

                    b.ToTable("CustomRoles");
                });

            modelBuilder.Entity("HankoSpa.Models.Permission", b =>
                {
                    b.Property<int>("PermisoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermisoId"));

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombrePermiso")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermisoId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("HankoSpa.Models.RolPermission", b =>
                {
                    b.Property<int>("CustomRolId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("CustomRolId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolPermissions");
                });

            modelBuilder.Entity("HankoSpa.Models.Servicio", b =>
                {
                    b.Property<int>("ServicioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicioId"));

                    b.Property<string>("DescripcionServicio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NombreServicio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ServicioId");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("HankoSpa.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomRolId")
                        .HasColumnType("int");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomRolId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HankoSpa.Models.Cita", b =>
                {
                    b.HasOne("HankoSpa.Models.Servicio", "Servicio")
                        .WithMany("Citas")
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HankoSpa.Models.User", "User")
                        .WithMany("Citas")
                        .HasForeignKey("UserId");

                    b.Navigation("Servicio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HankoSpa.Models.RolPermission", b =>
                {
                    b.HasOne("HankoSpa.Models.CustomRol", "CustomRol")
                        .WithMany("RolPermissions")
                        .HasForeignKey("CustomRolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HankoSpa.Models.Permission", "Permission")
                        .WithMany("RolPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomRol");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("HankoSpa.Models.User", b =>
                {
                    b.HasOne("HankoSpa.Models.CustomRol", "CustomRol")
                        .WithMany("Usuarios")
                        .HasForeignKey("CustomRolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomRol");
                });

            modelBuilder.Entity("HankoSpa.Models.CustomRol", b =>
                {
                    b.Navigation("RolPermissions");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("HankoSpa.Models.Permission", b =>
                {
                    b.Navigation("RolPermissions");
                });

            modelBuilder.Entity("HankoSpa.Models.Servicio", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("HankoSpa.Models.User", b =>
                {
                    b.Navigation("Citas");
                });
#pragma warning restore 612, 618
        }
    }
}
